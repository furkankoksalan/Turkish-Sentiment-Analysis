# -*- coding: utf-8 -*-
"""Untitled22.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hHGOL3j6GrHJNT68R8ruvaJNBiOwXsKh
"""

!pip install -U datasets fsspec pyarrow

"""# imports"""

import datasets
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from datasets import load_dataset
from transformers import AutoTokenizer, AutoModelForSequenceClassification, TrainingArguments, Trainer, EarlyStoppingCallback
from sklearn.metrics import accuracy_score, f1_score, precision_score, recall_score
import warnings
warnings.filterwarnings('ignore')

plt.rcParams['font.family'] = 'DejaVu Sans'

"""# load datasets"""

ds = load_dataset("winvoker/turkish-sentiment-analysis-dataset")

print(ds)

print(ds['train'][0])

"""# models"""

model_list = [
    "dbmdz/bert-base-turkish-cased",
    "savasy/bert-base-turkish-sentiment-cased"
]

labels = ["Negative", "Positive"]
model_results = {}

"""# metrics"""

def calc_metrics(eval_pred):
    logits, labels_ = eval_pred
    predictions = np.argmax(logits, axis=-1)
    acc = accuracy_score(labels_, predictions)
    f1 = f1_score(labels_, predictions, average='weighted')
    prec = precision_score(labels_, predictions, average='weighted')
    rec = recall_score(labels_, predictions, average='weighted')
    return {"accuracy": acc, "f1": f1, "precision": prec, "recall": rec}

"""# process df"""

def process_data(tokenizer, dataset):
    def tokenize_text(examples):
        return tokenizer(examples['text'], truncation=True, padding='max_length', max_length=128)

    tokenized_dataset = dataset.map(tokenize_text, batched=True)
    filtered_data = tokenized_dataset.filter(lambda x: x['label'] in labels)
    filtered_data = filtered_data.cast_column("label", datasets.ClassLabel(num_classes=2, names=labels))
    filtered_data = filtered_data.rename_column("label", "labels")
    filtered_data.set_format("torch", columns=['input_ids', 'attention_mask', 'labels'])
    return filtered_data

for model_name in model_list:
    print(f"\nModel: {model_name} egitiliyor.")

    tokenizer = AutoTokenizer.from_pretrained(model_name)
    model = AutoModelForSequenceClassification.from_pretrained(model_name, num_labels=2)

    processed_data = process_data(tokenizer, ds)

    # training settings
    args = TrainingArguments(
        output_dir=f"./model_output_{model_name.split('/')[-1]}",
        eval_strategy="epoch",
        save_strategy="epoch",
        learning_rate=2e-5,
        per_device_train_batch_size=16,
        per_device_eval_batch_size=16,
        num_train_epochs=8,
        weight_decay=0.01,
        logging_steps=50,
        save_total_limit=2,
        load_best_model_at_end=True,
        metric_for_best_model="eval_f1",
        greater_is_better=True,
        warmup_steps=500,
        report_to="none",
        seed=42
    )

    early_stop = EarlyStoppingCallback(early_stopping_patience=3)

    trainer = Trainer(
        model=model,
        args=args,
        train_dataset=processed_data["train"],
        eval_dataset=processed_data["test"],
        tokenizer=tokenizer,
        compute_metrics=calc_metrics,
        callbacks=[early_stop]
    )

    # training
    trainer.train()

    test_results = trainer.evaluate()
    model_results[model_name] = {
        'accuracy': test_results['eval_accuracy'],
        'f1': test_results['eval_f1'],
        'precision': test_results['eval_precision'],
        'recall': test_results['eval_recall']
    }

    print(f"{model_name} bitti - F1: {test_results['eval_f1']:.4f}")

df_results = pd.DataFrame(model_results).T
print("\n" + "="*60)
print("MODEL KARSILASTIRMA SONUCLARI:")
print("="*60)
print(df_results.round(4))

"""# Select best model"""

best_acc = df_results['accuracy'].idxmax()
best_f1 = df_results['f1'].idxmax()
print(f"\nEn yuksek accuracy: {best_acc} - {df_results.loc[best_acc, 'accuracy']:.4f}")
print(f"En yuksek f1: {best_f1} - {df_results.loc[best_f1, 'f1']:.4f}")

"""# Visualization"""

fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(14, 10))
fig.suptitle('Model Performans Analizi', fontsize=14, weight='bold')

# 1. bar
metrics = ['accuracy', 'f1', 'precision', 'recall']
x_positions = np.arange(len(df_results.index))
bar_width = 0.2

colors = ['#e74c3c', '#3498db', '#2ecc71', '#f39c12']
for i, metric in enumerate(metrics):
    ax1.bar(x_positions + i*bar_width, df_results[metric], bar_width,
            label=metric, color=colors[i], alpha=0.7)

ax1.set_xlabel('Modeller')
ax1.set_ylabel('Skor')
ax1.set_title('Metrik Karsilastirma')
ax1.set_xticks(x_positions + bar_width * 1.5)
ax1.set_xticklabels([m.split('/')[-1] for m in df_results.index], rotation=30)
ax1.legend()
ax1.grid(alpha=0.3)

# 2. heatmap
sns.heatmap(df_results[metrics].T, annot=True, fmt='.3f', cmap='YlOrRd', ax=ax2)
ax2.set_title('Performans Heatmap')

# 3. scatter plot
ax3.scatter(df_results['accuracy'], df_results['f1'], s=150, c=['red', 'blue'], alpha=0.6)
for i, model in enumerate(df_results.index):
    ax3.annotate(model.split('/')[-1],
                (df_results.loc[model, 'accuracy'], df_results.loc[model, 'f1']),
                xytext=(3, 3), textcoords='offset points')
ax3.set_xlabel('Accuracy')
ax3.set_ylabel('F1 Score')
ax3.set_title('Accuracy vs F1')
ax3.grid(alpha=0.3)

# 4. line plot
model_names_short = [m.split('/')[-1] for m in df_results.index]
for metric in metrics:
    ax4.plot(model_names_short, df_results[metric], marker='o', label=metric, linewidth=2)
ax4.set_xlabel('Modeller')
ax4.set_ylabel('Skor')
ax4.set_title('Metrik Trendi')
ax4.legend()
ax4.grid(alpha=0.3)

plt.tight_layout()
plt.show()

"""# csv"""

df_results.to_csv('model_comparison.csv')
print("\nSonuclar model_comparison.csv dosyasina kaydedildi.")

"""# summary"""

print("\n" + "="*70)
print("VERI OZETI :")
print("="*70)
for model, results in model_results.items():
    print(f"\n{model}:")
    print(f"  Accuracy:  {results['accuracy']:.4f}")
    print(f"  F1 Score:  {results['f1']:.4f}")
    print(f"  Precision: {results['precision']:.4f}")
    print(f"  Recall:    {results['recall']:.4f}")